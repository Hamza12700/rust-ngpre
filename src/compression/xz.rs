use std::io::Read;

use xz2::read::XzDecoder;

use super::{
    Compression,
    XzParameters,
};


pub struct XzCompression;

impl XzCompression {
    pub fn new(_params: &XzParameters) -> XzCompression {
        XzCompression
    }
}

impl<'a, R: Read + 'a> Compression<'a, R> for XzCompression {
    fn decoder(&self, r: R) -> Box<Read + 'a> {
        Box::new(XzDecoder::new(r))
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use compression::CompressionType;

    // Example from the n5 documentation spec.
    const TEST_BLOCK_I16_XZ: [u8; 84] = [
        0x00, 0x00,
        0x00, 0x03,
        0x00, 0x00, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x02,
        0x00, 0x00, 0x00, 0x03,
        0xfd, 0x37, 0x7a, 0x58,
        0x5a, 0x00, 0x00, 0x04,
        0xe6, 0xd6, 0xb4, 0x46,
        0x02, 0x00, 0x21, 0x01,
        0x16, 0x00, 0x00, 0x00,
        0x74, 0x2f, 0xe5, 0xa3,
        0x01, 0x00, 0x0b, 0x00,
        0x01, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x04, 0x00,
        0x05, 0x00, 0x06, 0x00,
        0x0d, 0x03, 0x09, 0xca,
        0x34, 0xec, 0x15, 0xa7,
        0x00, 0x01, 0x24, 0x0c,
        0xa6, 0x18, 0xd8, 0xd8,
        0x1f, 0xb6, 0xf3, 0x7d,
        0x01, 0x00, 0x00, 0x00,
        0x00, 0x04, 0x59, 0x5a,
    ];

    #[test]
    fn test_read_doc_spec_block() {
        ::tests::test_read_doc_spec_block(
            &TEST_BLOCK_I16_XZ[..],
            CompressionType::Xz(XzParameters::default()));
    }
}
